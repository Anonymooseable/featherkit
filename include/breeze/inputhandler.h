#pragma once
#include <queue>
#include "event.h"
#include "intvec2.h"

namespace windbreeze
{
    class InputBackend;

    class InputHandler
    {
        public:
            InputHandler(InputBackend& backend) : inputBackend(backend){}
            void processEvents(bool keepLast = false);
            bool pollEvent(Event& event);
            const std::queue<Event>& getEventQueue() const;

            bool isKeyPressed(Keyboard::Code code);

            bool isMouseButtonPressed(Mouse::Button b);
            IntVec2 getMouseGlobalPosition();
            IntVec2 getMouseWindowPosition();
            void setMouseGlobalPosition(int32_t x, int32_t y);
            void setMouseWindowPosition(int32_t x, int32_t y);

            bool isGamepadConnected(uint32_t id);
            uint32_t getGamepadButtonCount(uint32_t id);
            bool isGamepadButtonPressed(uint32_t id, uint32_t button);
            bool gamepadHasAxis(uint32_t id, Gamepad::Axis axis);
            float getGamepadAxisPosition(uint32_t id, Gamepad::Axis axis);

            void setGamepadThreshold(float threshold);
            void setKeyRepeatEnabled(bool enabled);
        private:
            InputBackend& inputBackend;
            std::queue<Event> eventQueue;
    };
/** @class InputHandler
 *  Provides an access to input events and settings, as well as the current state of the input devices.
 *  Must be given an input backend upon creaton which is stored internally as a reference. 
 * 
 */

/** @fn InputHandler::InputHandler(InputBackend& backend) 
 *  Constructs an input handler with the given backend.
 *  
 *  @param backend Input backend given
 */

/** @fn void InputHandler::processEvents(bool keepLast = false)
 *  Fetches events generated by the backend. This clears the event queue in the backend and stores the events for polling. Must be called before using InputHandler::pollEvent, otherwise there will be no events to poll.
 *
 *  @param keepLast If this is false, the InputHandler will discard all unhandled events. Otherwise, new events will be queued after the old ones. Default value is false.
 */

/** @fn bool InputHandler::pollEvent(Event& event)
 *  Accesses the frontmost event in the event queue, removing it in the process.
 *
 *  @param event Event instance in which to store the frontmost event
 *  @return Returns true if an event was given, or false if the event queue was empty
 */
}

